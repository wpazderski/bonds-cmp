import { Calculator } from "../Calculator";

import type { SettingsState } from "../../store";
import type { Bonds } from "../Types";





const inflationRatesPercent = [20.0, 12.0, 5.0, 0.0, -2.0, 9.0, 7.5, 6.0, 3.0, 2.5];
const referenceRatesPercent = [7.5, 7.5, 7.0, 5.0, 4.0, 3.0, 1.0, 0.0, -0.5, 12.0, 5.0, 3.0];

const basicBonds: Bonds = {
    id: "",
    name: "",
    capitalization: false,
    unitPrice: 100,
    interestPeriods: [
        {
            id: "1",
            repeats: 10,
            duration: { num: 1, unit: "y" },
            interestRate: { additiveInflation: false, additivePercent: 10, additiveReferenceRate: false },
            cancellationPolicy: {
                fixedPenalty: 2,
                limitedToInterestPeriodInterest: true,
                limitedToTotalInterest: true,
                percentOfInterestPeriodInterest: 0,
                percentOfTotalInterest: 0,
            },
        },
    ],
};
const basicSettings: SettingsState = {
    currency: "EUR",
    adjustInterestRatePercentage: true,
    amountToInvest: 1000000,
    investmentDuration: { num: 10, unit: "y" },
    investmentIncomeTax: 0,
    inflationRates: inflationRatesPercent,
    referenceRates: referenceRatesPercent,
};

describe(".calculate()", () => {
    it("returns correct total value, not adjusted for inflation", () => {
        const calculator = new Calculator(basicBonds, basicSettings);
        expect(calculator.calculate(false, false)).toEqual([1000000, 1000000, 1000000, 1005000, 1013333.3333333334, 1021666.6666666666, 1030000, 1038333.3333333334, 1046666.6666666666, 1055000, 1063333.3333333333, 1071666.6666666667, 1080000, 1100000, 1100000, 1105000, 1113333.3333333333, 1121666.6666666667, 1130000, 1138333.3333333333, 1146666.6666666667, 1155000, 1163333.3333333333, 1171666.6666666667, 1180000, 1200000, 1200000, 1205000, 1213333.3333333333, 1221666.6666666667, 1230000, 1238333.3333333333, 1246666.6666666667, 1255000, 1263333.3333333333, 1271666.6666666667, 1280000, 1300000, 1300000, 1305000, 1313333.3333333333, 1321666.6666666667, 1330000, 1338333.3333333333, 1346666.6666666667, 1355000, 1363333.3333333333, 1371666.6666666667, 1380000, 1400000, 1400000, 1405000, 1413333.3333333333, 1421666.6666666667, 1430000, 1438333.3333333333, 1446666.6666666667, 1455000, 1463333.3333333333, 1471666.6666666667, 1480000, 1500000, 1500000, 1505000, 1513333.3333333333, 1521666.6666666667, 1530000, 1538333.3333333333, 1546666.6666666667, 1555000, 1563333.3333333333, 1571666.6666666667, 1580000, 1600000, 1600000, 1605000, 1613333.3333333333, 1621666.6666666667, 1630000, 1638333.3333333333, 1646666.6666666667, 1655000, 1663333.3333333333, 1671666.6666666667, 1680000, 1700000, 1700000, 1705000, 1713333.3333333333, 1721666.6666666667, 1730000, 1738333.3333333333, 1746666.6666666667, 1755000, 1763333.3333333333, 1771666.6666666667, 1780000, 1800000, 1800000, 1805000, 1813333.3333333333, 1821666.6666666667, 1830000, 1838333.3333333333, 1846666.6666666667, 1855000, 1863333.3333333333, 1871666.6666666667, 1880000, 1900000, 1900000, 1905000, 1913333.3333333333, 1921666.6666666667, 1930000, 1938333.3333333333, 1946666.6666666667, 1955000, 1963333.3333333333, 1971666.6666666667, 2000000]);
    });

    it("returns correct total value, adjusted for inflation", () => {
        const calculator = new Calculator(basicBonds, basicSettings);
        expect(calculator.calculate(false, true)).toEqual([1000000, 990099.0099009901, 980392.1568627451, 975728.1553398058, 974358.9743589744, 973015.8730158729, 971698.1132075471, 970404.984423676, 969135.8024691357, 967889.9082568807, 966666.6666666665, 965465.4654654654, 964285.7142857142, 978067.5755779489, 974025.9740259738, 974426.807760141, 977751.7564402809, 981049.5626822156, 984320.5574912891, 987565.0665124349, 990783.4101382487, 993975.9036144577, 997142.857142857, 1000284.575981787, 1003401.3605442175, 1020408.163265306, 1020408.163265306, 1024659.8639455781, 1031746.0317460316, 1038832.1995464852, 1045918.3673469386, 1053004.5351473922, 1060090.7029478457, 1067176.8707482992, 1074263.0385487527, 1081349.2063492062, 1088435.3741496596, 1107287.6562979112, 1109139.3078970716, 1115270.2286944927, 1124275.2134410809, 1133310.4670439605, 1142376.1423761423, 1151472.393341822, 1160599.374885089, 1169757.2429987222, 1178946.1547330795, 1188166.2682050748, 1197417.7426072469, 1205728.6579998888, 1196819.3329407764, 1192283.709551881, 1190622.2101812123, 1188984.7324881924, 1187370.759259665, 1185779.7880248933, 1184211.3305340104, 1182664.9122584558, 1181140.0719123273, 1179636.3609936284, 1178153.3433444523, 1186657.7236976186, 1179332.6760204728, 1176004.4979163657, 1175305.6863950368, 1174615.345316391, 1173933.321600138, 1173259.465832583, 1172593.6321574985, 1171935.678170877, 1171285.4648193917, 1170642.8563024271, 1170007.7199775202, 1178923.327642819, 1173087.0735455775, 1170956.1579871047, 1171266.1050490604, 1171573.028237241, 1171876.971588643, 1172177.9782893069, 1172476.0906947723, 1172771.350349946, 1173063.7980084037, 1173353.4736511416, 1173640.4165047968, 1184650.699476401, 1181703.8071891463, 1182238.5147942093, 1185076.1709953356, 1187899.8140794192, 1190709.54759166, 1193505.4740596146, 1196287.6950056676, 1199056.3109593194, 1201811.4214692947, 1204553.1251154747, 1207281.5195206534, 1218308.3380432206, 1215780.7273833798, 1216633.759639768, 1219725.4092659215, 1222804.309821452, 1225870.5400043256, 1228924.1778661197, 1231965.3008186442, 1234993.9856404837, 1238010.3084834584, 1241014.3448790074, 1244006.1697444934, 1254626.4727816363, 1252023.5132945376, 1252719.309297349, 1255599.6860090368, 1258468.1848786147, 1261324.8792260955, 1264169.841769274, 1267003.1446298994, 1269824.859339765, 1272635.0568467332, 1275433.8075206794, 1291132.5062215813]);
    });

    it("returns correct earnings, not adjusted for inflation", () => {
        const calculator = new Calculator(basicBonds, basicSettings);
        expect(calculator.calculate(true, false)).toEqual([0, 0, 0, 5000, 13333.333333333372, 21666.666666666628, 30000, 38333.33333333337, 46666.66666666663, 55000, 63333.333333333256, 71666.66666666674, 80000, 100000, 100000, 105000, 113333.33333333326, 121666.66666666674, 130000, 138333.33333333326, 146666.66666666674, 155000, 163333.33333333326, 171666.66666666674, 180000, 200000, 200000, 205000, 213333.33333333326, 221666.66666666674, 230000, 238333.33333333326, 246666.66666666674, 255000, 263333.33333333326, 271666.66666666674, 280000, 300000, 300000, 305000, 313333.33333333326, 321666.66666666674, 330000, 338333.33333333326, 346666.66666666674, 355000, 363333.33333333326, 371666.66666666674, 380000, 400000, 400000, 405000, 413333.33333333326, 421666.66666666674, 430000, 438333.33333333326, 446666.66666666674, 455000, 463333.33333333326, 471666.66666666674, 480000, 500000, 500000, 505000, 513333.33333333326, 521666.66666666674, 530000, 538333.3333333333, 546666.6666666667, 555000, 563333.3333333333, 571666.6666666667, 580000, 600000, 600000, 605000, 613333.3333333333, 621666.6666666667, 630000, 638333.3333333333, 646666.6666666667, 655000, 663333.3333333333, 671666.6666666667, 680000, 700000, 700000, 705000, 713333.3333333333, 721666.6666666667, 730000, 738333.3333333333, 746666.6666666667, 755000, 763333.3333333333, 771666.6666666667, 780000, 800000, 800000, 805000, 813333.3333333333, 821666.6666666667, 830000, 838333.3333333333, 846666.6666666667, 855000, 863333.3333333333, 871666.6666666667, 880000, 900000, 900000, 905000, 913333.3333333333, 921666.6666666667, 930000, 938333.3333333333, 946666.6666666667, 955000, 963333.3333333333, 971666.6666666667, 1000000]);
    });

    it("returns correct earnings, adjusted for inflation", () => {
        const calculator = new Calculator(basicBonds, basicSettings);
        expect(calculator.calculate(true, true)).toEqual([0, -9900.990099009941, -19607.84313725494, -24271.84466019424, -25641.025641025626, -26984.1269841271, -28301.88679245289, -29595.01557632396, -30864.197530864272, -32110.091743119294, -33333.33333333349, -34534.534534534556, -35714.2857142858, -21932.42442205106, -25974.025974026183, -25573.192239859025, -22248.243559719063, -18950.43731778441, -15679.442508710898, -12434.93348756514, -9216.589861751301, -6024.096385542303, -2857.142857142957, 284.57598178705666, 3401.3605442175176, 20408.163265306037, 20408.163265306037, 24659.86394557811, 31746.0317460316, 38832.19954648521, 45918.36734693858, 53004.53514739219, 60090.70294784568, 67176.87074829917, 74263.03854875267, 81349.20634920616, 88435.37414965965, 107287.65629791119, 109139.30789707159, 115270.22869449272, 124275.21344108088, 133310.46704396047, 142376.14237614232, 151472.39334182208, 160599.374885089, 169757.24299872224, 178946.1547330795, 188166.26820507483, 197417.74260724685, 205728.65799988876, 196819.33294077637, 192283.70955188107, 190622.2101812123, 188984.73248819239, 187370.75925966492, 185779.78802489326, 184211.33053401043, 182664.91225845576, 181140.07191232732, 179636.3609936284, 178153.34334445233, 186657.72369761858, 179332.67602047278, 176004.49791636574, 175305.68639503676, 174615.34531639097, 173933.32160013798, 173259.4658325829, 172593.6321574985, 171935.67817087704, 171285.46481939172, 170642.85630242713, 170007.71997752017, 178923.3276428189, 173087.07354557747, 170956.15798710473, 171266.10504906042, 171573.0282372411, 171876.97158864303, 172177.97828930686, 172476.0906947723, 172771.35034994595, 173063.79800840374, 173353.47365114163, 173640.41650479683, 184650.6994764011, 181703.8071891463, 182238.51479420927, 185076.17099533556, 187899.81407941924, 190709.54759165994, 193505.4740596146, 196287.69500566763, 199056.31095931935, 201811.4214692947, 204553.1251154747, 207281.5195206534, 218308.33804322057, 215780.72738337982, 216633.75963976793, 219725.40926592145, 222804.309821452, 225870.54000432556, 228924.17786611966, 231965.30081864423, 234993.98564048368, 238010.30848345836, 241014.34487900743, 244006.16974449344, 254626.4727816363, 252023.51329453755, 252719.30929734907, 255599.68600903684, 258468.18487861473, 261324.8792260955, 264169.8417692741, 267003.1446298994, 269824.85933976504, 272635.0568467332, 275433.80752067943, 291132.50622158125]);
    });

    it("works with capitalization", () => {
        const calculator = new Calculator(
            {
                ...basicBonds,
                capitalization: true,
            },
            basicSettings,
        );
        expect(calculator.calculate(false, false)).toEqual([1000000, 1000000, 1000000, 1005000, 1013333.3333333334, 1021666.6666666666, 1030000, 1038333.3333333334, 1046666.6666666666, 1055000, 1063333.3333333333, 1071666.6666666667, 1080000, 1100000, 1100000, 1107500, 1116666.6666666667, 1125833.3333333333, 1135000, 1144166.6666666667, 1153333.3333333333, 1162500, 1171666.6666666667, 1180833.3333333333, 1190000, 1210000, 1210166.6666666667, 1220250, 1230333.3333333333, 1240416.6666666667, 1250500, 1260583.3333333333, 1270666.6666666667, 1280750, 1290833.3333333333, 1300916.6666666667, 1311000, 1331000, 1333183.3333333333, 1344275, 1355366.6666666667, 1366458.3333333333, 1377550, 1388641.6666666667, 1399733.3333333333, 1410825, 1421916.6666666667, 1433008.3333333335, 1444100, 1464100, 1468501.6666666667, 1480702.5, 1492903.3333333333, 1505104.1666666667, 1517305, 1529505.8333333333, 1541706.6666666667, 1553907.5, 1566108.3333333333, 1578309.1666666667, 1590510, 1610510, 1617351.8333333333, 1630772.75, 1644193.6666666667, 1657614.5833333333, 1671035.5, 1684456.4166666667, 1697877.3333333333, 1711298.25, 1724719.1666666667, 1738140.0833333335, 1751561, 1771561, 1781087.0166666666, 1795850.025, 1810613.0333333334, 1825376.0416666667, 1840139.05, 1854902.0583333333, 1869665.0666666667, 1884428.075, 1899191.0833333335, 1913954.0916666668, 1928717.1, 1948717.1, 1961195.7183333335, 1977435.0275, 1993674.3366666667, 2009913.6458333335, 2026152.955, 2042392.264166667, 2058631.5733333335, 2074870.8825, 2091110.191666667, 2107349.5008333335, 2123588.81, 2143588.81, 2159315.2901666667, 2177178.53025, 2195041.7703333334, 2212905.010416667, 2230768.2505, 2248631.490583333, 2266494.7306666668, 2284357.9707500003, 2302221.2108333334, 2320084.4509166665, 2337947.691, 2357947.691, 2377246.8191833333, 2396896.383275, 2416545.947366667, 2436195.5114583336, 2455845.07555, 2475494.639641667, 2495144.2037333334, 2514793.767825, 2534443.3319166666, 2554092.8960083337, 2593742.4601000003]);
    });

    it("works with custom unit price", () => {
        const calculator = new Calculator(
            {
                ...basicBonds,
                unitPrice: 12345.67,
            },
            basicSettings,
        );
        expect(calculator.calculate(false, false)).toEqual([1000000, 1008171.32725, 1016504.6545, 1024837.98175, 1033171.309, 1041504.63625, 1049837.9635, 1058171.29075, 1066504.618, 1074837.94525, 1083171.2725, 1091504.59975, 1099837.9270000001, 1108171.2542500002, 1116504.5815, 1124837.9087500002, 1133171.236, 1141504.5632500001, 1149837.8905000002, 1158171.21775, 1166504.5450000002, 1174837.8722500002, 1183171.1995, 1191504.5267500002, 1199837.8540000003, 1208171.1812500001, 1216504.5085, 1224837.83575, 1233171.1630000002, 1241504.49025, 1249837.8175000001, 1258171.14475, 1266504.472, 1274837.7992500002, 1283171.1265, 1291504.45375, 1299837.781, 1308171.10825, 1316504.4355, 1324837.76275, 1333171.0899999999, 1341504.41725, 1349837.7445, 1358171.07175, 1366504.399, 1374837.72625, 1383171.0535, 1391504.38075, 1399837.708, 1408171.0352500002, 1416504.3625, 1424837.6897500001, 1433171.017, 1441504.34425, 1449837.6715000002, 1458170.99875, 1466504.3260000001, 1474837.6532500002, 1483170.9805, 1491504.3077500002, 1499837.6350000002, 1508170.9622500003, 1516504.2895000002, 1524837.6167500003, 1533170.9440000001, 1541504.2712500002, 1549837.5985000003, 1558170.9257500002, 1566504.2530000003, 1574837.5802500003, 1583170.9075000002, 1591504.2347500003, 1599837.5620000004, 1608170.8892500002, 1616504.2165, 1624837.5437500002, 1633170.8710000003, 1641504.1982500001, 1649837.5255000002, 1658170.85275, 1666504.1800000002, 1674837.5072500003, 1683170.8345, 1691504.1617500002, 1699837.489, 1708170.8162500001, 1716504.1435, 1724837.47075, 1733170.798, 1741504.12525, 1749837.4525000001, 1758170.77975, 1766504.107, 1774837.4342500002, 1783170.7615, 1791504.08875, 1799837.4160000002, 1808170.7432500003, 1816504.0705000001, 1824837.3977500002, 1833170.725, 1841504.0522500002, 1849837.3795000003, 1858170.7067500001, 1866504.0340000002, 1874837.3612500003, 1883170.6885000002, 1891504.0157500003, 1899837.3430000003, 1908170.6702500004, 1916503.9975000003, 1924837.3247500004, 1933170.6520000002, 1941503.9792500003, 1949837.3065000004, 1958170.6337500003, 1966503.9610000004, 1974837.2882500004, 1983170.6155000003, 1991503.9427500004, 1999999.2700000005]);
    });

    it("works with multiple interest periods", () => {
        const calculator = new Calculator(
            {
                ...basicBonds,
                interestPeriods: [
                    {
                        id: "1",
                        repeats: 3,
                        duration: { num: 1, unit: "y" },
                        interestRate: { additiveInflation: false, additivePercent: 10, additiveReferenceRate: false },
                        cancellationPolicy: {
                            fixedPenalty: 3,
                            limitedToInterestPeriodInterest: false,
                            limitedToTotalInterest: false,
                            percentOfInterestPeriodInterest: 1.5,
                            percentOfTotalInterest: 0.25,
                        },
                    },
                    {
                        id: "2",
                        repeats: 2,
                        duration: { num: 7, unit: "m" },
                        interestRate: { additiveInflation: true, additivePercent: 1, additiveReferenceRate: false },
                        cancellationPolicy: {
                            fixedPenalty: 3,
                            limitedToInterestPeriodInterest: false,
                            limitedToTotalInterest: false,
                            percentOfInterestPeriodInterest: 1.5,
                            percentOfTotalInterest: 0.25,
                        },
                    },
                    {
                        id: "3",
                        repeats: 1,
                        duration: { num: 2, unit: "y" },
                        interestRate: { additiveInflation: false, additivePercent: 5, additiveReferenceRate: true },
                        cancellationPolicy: {
                            fixedPenalty: 3,
                            limitedToInterestPeriodInterest: false,
                            limitedToTotalInterest: false,
                            percentOfInterestPeriodInterest: 1.5,
                            percentOfTotalInterest: 0.25,
                        },
                    },
                ],
            },
            basicSettings,
        );
        expect(calculator.calculate(false, false)).toEqual([1000000, 978187.5, 986375, 994562.5, 1002750, 1010937.5, 1019125, 1027312.5, 1035500, 1043687.5, 1051875, 1060062.5, 1068250, 1077937.5, 1086125, 1094312.5, 1102500, 1110687.5, 1118875, 1127062.5, 1135250, 1143437.5, 1151625, 1159812.5, 1168000, 1177687.5, 1185875, 1194062.5, 1202250, 1210437.5, 1218625, 1226812.5, 1235000, 1243187.5, 1251375, 1259562.5, 1267750, 1270068.75, 1270887.5, 1271706.25, 1272525, 1273343.75, 1274162.5, 1274981.25, 1274932.2916666667, 1274795.8333333335, 1274659.3750000002, 1274522.9166666667, 1274386.4583333335, 1274250.0000000002, 1274113.5416666667, 1281331.25, 1288563.5416666665, 1295795.8333333333, 1303028.125, 1310260.4166666665, 1317492.7083333333, 1324725, 1331957.2916666665, 1339189.5833333333, 1346421.875, 1353654.1666666665, 1360886.4583333333, 1368118.75, 1375351.0416666665, 1382583.3333333333, 1389815.625, 1397047.9166666665, 1404280.2083333333, 1411512.5, 1418744.7916666665, 1425977.0833333333, 1433209.375, 1440441.6666666665, 1481527.7777777778, 1438430.53125, 1439778.2847222222, 1441126.0381944445, 1442473.7916666667, 1443821.5451388888, 1445169.298611111, 1446517.0520833333, 1447864.8055555555, 1449212.5590277778, 1450560.3125, 1451908.0659722222, 1453255.8194444445, 1454850.4895833333, 1456198.2430555555, 1457545.9965277778, 1458893.7499999998, 1460241.503472222, 1461589.2569444443, 1462937.0104166665, 1464284.7638888888, 1465632.517361111, 1466980.2708333333, 1468328.0243055555, 1469675.7777777778, 1471270.4479166667, 1472618.201388889, 1473965.954861111, 1475313.7083333333, 1476661.4618055555, 1478009.2152777778, 1479356.96875, 1480704.7222222222, 1482052.4756944445, 1483400.2291666667, 1484747.982638889, 1486095.736111111, 1489509.8734374999, 1492677.0940972222, 1495844.3147569443, 1499011.5354166667, 1502178.7560763888, 1505345.976736111, 1508513.1973958332, 1512018.8996527777, 1515186.1203124998, 1518353.3409722222, 1521520.5616319443, 1524687.7822916666, 1527855.0029513887, 1531022.223611111, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN]);
    });

    it("works with adjustInterestRatePercentage=false", () => {
        const calculator = new Calculator(
            basicBonds,
            {
                ...basicSettings,
                adjustInterestRatePercentage: false,
            },
        );
        expect(calculator.calculate(false, false)).toEqual([1000000, 1000000, 1000000, 1005000, 1013333.3333333334, 1021666.6666666666, 1030000, 1038333.3333333334, 1046666.6666666666, 1055000, 1063333.3333333333, 1071666.6666666667, 1080000, 1100000, 1100000, 1105000, 1113333.3333333333, 1121666.6666666667, 1130000, 1138333.3333333333, 1146666.6666666667, 1155000, 1163333.3333333333, 1171666.6666666667, 1180000, 1200000, 1200000, 1205000, 1213333.3333333333, 1221666.6666666667, 1230000, 1238333.3333333333, 1246666.6666666667, 1255000, 1263333.3333333333, 1271666.6666666667, 1280000, 1300000, 1300000, 1305000, 1313333.3333333333, 1321666.6666666667, 1330000, 1338333.3333333333, 1346666.6666666667, 1355000, 1363333.3333333333, 1371666.6666666667, 1380000, 1400000, 1400000, 1405000, 1413333.3333333333, 1421666.6666666667, 1430000, 1438333.3333333333, 1446666.6666666667, 1455000, 1463333.3333333333, 1471666.6666666667, 1480000, 1500000, 1500000, 1505000, 1513333.3333333333, 1521666.6666666667, 1530000, 1538333.3333333333, 1546666.6666666667, 1555000, 1563333.3333333333, 1571666.6666666667, 1580000, 1600000, 1600000, 1605000, 1613333.3333333333, 1621666.6666666667, 1630000, 1638333.3333333333, 1646666.6666666667, 1655000, 1663333.3333333333, 1671666.6666666667, 1680000, 1700000, 1700000, 1705000, 1713333.3333333333, 1721666.6666666667, 1730000, 1738333.3333333333, 1746666.6666666667, 1755000, 1763333.3333333333, 1771666.6666666667, 1780000, 1800000, 1800000, 1805000, 1813333.3333333333, 1821666.6666666667, 1830000, 1838333.3333333333, 1846666.6666666667, 1855000, 1863333.3333333333, 1871666.6666666667, 1880000, 1900000, 1900000, 1905000, 1913333.3333333333, 1921666.6666666667, 1930000, 1938333.3333333333, 1946666.6666666667, 1955000, 1963333.3333333333, 1971666.6666666667, 2000000]);
    });

    it("works with custom amountToInvest", () => {
        const calculator = new Calculator(
            basicBonds,
            {
                ...basicSettings,
                amountToInvest: 1234.56
            },
        );
        expect(calculator.calculate(false, false)).toEqual([1234.56, 1234.56, 1234.56, 1240.56, 1250.56, 1260.56, 1270.56, 1280.56, 1290.56, 1300.56, 1310.56, 1320.56, 1330.56, 1354.56, 1354.56, 1360.56, 1370.56, 1380.56, 1390.56, 1400.56, 1410.56, 1420.56, 1430.56, 1440.56, 1450.56, 1474.56, 1474.56, 1480.56, 1490.56, 1500.56, 1510.56, 1520.56, 1530.56, 1540.56, 1550.56, 1560.56, 1570.56, 1594.56, 1594.56, 1600.56, 1610.56, 1620.56, 1630.56, 1640.56, 1650.56, 1660.56, 1670.56, 1680.56, 1690.56, 1714.56, 1714.56, 1720.56, 1730.56, 1740.56, 1750.56, 1760.56, 1770.56, 1780.56, 1790.56, 1800.56, 1810.56, 1834.56, 1834.56, 1840.56, 1850.56, 1860.56, 1870.56, 1880.56, 1890.56, 1900.56, 1910.56, 1920.56, 1930.56, 1954.56, 1954.56, 1960.56, 1970.56, 1980.56, 1990.56, 2000.56, 2010.56, 2020.56, 2030.56, 2040.56, 2050.56, 2074.56, 2074.56, 2080.56, 2090.56, 2100.56, 2110.56, 2120.56, 2130.56, 2140.56, 2150.56, 2160.56, 2170.56, 2194.56, 2194.56, 2200.56, 2210.56, 2220.56, 2230.56, 2240.56, 2250.56, 2260.56, 2270.56, 2280.56, 2290.56, 2314.56, 2314.56, 2320.56, 2330.56, 2340.56, 2350.56, 2360.56, 2370.56, 2380.56, 2390.56, 2400.56, 2434.56]);
    });

    it("works with custom investmentDuration", () => {
        const calculator = new Calculator(
            basicBonds,
            {
                ...basicSettings,
                investmentDuration: { num: 33, unit: "m" },
            },
        );
        expect(calculator.calculate(false, false)).toEqual([1000000, 1000000, 1000000, 1005000, 1013333.3333333334, 1021666.6666666666, 1030000, 1038333.3333333334, 1046666.6666666666, 1055000, 1063333.3333333333, 1071666.6666666667, 1080000, 1100000, 1100000, 1105000, 1113333.3333333333, 1121666.6666666667, 1130000, 1138333.3333333333, 1146666.6666666667, 1155000, 1163333.3333333333, 1171666.6666666667, 1180000, 1200000, 1200000, 1205000, 1213333.3333333333, 1221666.6666666667, 1230000, 1238333.3333333333, 1246666.6666666667, 1255000, 1263333.3333333333, 1271666.6666666667, 1280000, 1300000, 1300000, 1305000, 1313333.3333333333, 1321666.6666666667, 1330000, 1338333.3333333333, 1346666.6666666667, 1355000, 1363333.3333333333, 1371666.6666666667, 1380000, 1400000, 1400000, 1405000, 1413333.3333333333, 1421666.6666666667, 1430000, 1438333.3333333333, 1446666.6666666667, 1455000, 1463333.3333333333, 1471666.6666666667, 1480000, 1500000, 1500000, 1505000, 1513333.3333333333, 1521666.6666666667, 1530000, 1538333.3333333333, 1546666.6666666667, 1555000, 1563333.3333333333, 1571666.6666666667, 1580000, 1600000, 1600000, 1605000, 1613333.3333333333, 1621666.6666666667, 1630000, 1638333.3333333333, 1646666.6666666667, 1655000, 1663333.3333333333, 1671666.6666666667, 1680000, 1700000, 1700000, 1705000, 1713333.3333333333, 1721666.6666666667, 1730000, 1738333.3333333333, 1746666.6666666667, 1755000, 1763333.3333333333, 1771666.6666666667, 1780000, 1800000, 1800000, 1805000, 1813333.3333333333, 1821666.6666666667, 1830000, 1838333.3333333333, 1846666.6666666667, 1855000, 1863333.3333333333, 1871666.6666666667, 1880000, 1900000, 1900000, 1905000, 1913333.3333333333, 1921666.6666666667, 1930000, 1938333.3333333333, 1946666.6666666667, 1955000, 1963333.3333333333, 1971666.6666666667, 2000000]);
    });

    it("works with investmentIncomeTax", () => {
        const calculator = new Calculator(
            basicBonds,
            {
                ...basicSettings,
                investmentIncomeTax: 19,
            },
        );
        expect(calculator.calculate(false, false)).toEqual([1000000, 1000000, 1000000, 1004050, 1010800, 1017550, 1024300, 1031050, 1037800, 1044550, 1051300, 1058050, 1064800, 1081000, 1081000, 1085050, 1091800, 1098550, 1105300, 1112050, 1118800, 1125550, 1132300, 1139050, 1145800, 1162000, 1162000, 1166050, 1172800, 1179550, 1186300, 1193050, 1199800, 1206550, 1213300, 1220050, 1226800, 1243000, 1243000, 1247050, 1253800, 1260550, 1267300, 1274050, 1280800, 1287550, 1294300, 1301050, 1307800, 1324000, 1324000, 1328050, 1334800, 1341550, 1348300, 1355050, 1361800, 1368550, 1375300, 1382050, 1388800, 1405000, 1405000, 1409050, 1415800, 1422550, 1429300, 1436050, 1442800, 1449550, 1456300, 1463050, 1469800, 1486000, 1486000, 1490050, 1496800, 1503550, 1510300, 1517050, 1523800, 1530550, 1537300, 1544050, 1550800, 1567000, 1567000, 1571050, 1577800, 1584550, 1591300, 1598050, 1604800, 1611550, 1618300, 1625050, 1631800, 1648000, 1648000, 1652050, 1658800, 1665550, 1672300, 1679050, 1685800, 1692550, 1699300, 1706050, 1712800, 1729000, 1729000, 1733050, 1739800, 1746550, 1753300, 1760050, 1766800, 1773550, 1780300, 1787050, 1810000]);
    });
});
